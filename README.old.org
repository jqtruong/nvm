#+STARTUP: hidestars
#+TODO: TODO IN_PROGRESS | DONE

* Summary
  In honor of my grandfather whose mind was so emcompassing
  that it left its shell long before his body realized.


* WebGL

** [2020-07-09 Thu]
   alright, time to make something shiny! in v3!

   after reviewing the code, and made some slight changes,
   i'm ready to work on it. the main deal is to make shiny
   spinning windows.

   but first, let's look at a program, eg. =[[file:v3/programs/sine-wave.js][sine-wave]]=. It
   takes an array of parameters:
   #+BEGIN_SRC js
     {
       ...
       params: [
         ['POINTS'   , 0, 1, -.45],
         ['POINTS'   , 0, 1,  .45],
         ['TRIANGLES', 0, 3, -.25],  // just one of these
         ['TRIANGLES', 0, 3,  .25],
       ],
       ...
     }
   #+END_SRC
   that is used in the =render(params)= function. The latter
   does whatever it wants with them, which is fine for
   now. The function can be multiple times, given the number
   of param-arrays in the =params= [[file:v3/Programs.js::params:%20%5B][attribute]].

   I've copied =sine-wave= from v2's =[[file:v2/programs/drawing-modes.js][drawing-modes.js]]=¹. I
   need to update it, along with the params, to create
   different sine waves. I think i thought of this to learn
   more about the animation using trigonometry for the
   spinning windows. Anyways, would be cool to have the sine
   waves ondulate at different frequencies - and whatnot -
   with different colors.

   editing the [[file:v3/shaders/default-vrt.c::gl_Position%20=%20aPosition;][vertex]] is my first move, but what is
   =aPosition= again? It's used as the [[file:v2/programs/drawing-modes.js::window%5B'GL'%5D.sendVertices(null,%20buffer,%20'aPosition');][bridge]] to send the
   vertices via the buffer.

   i think i'm aiming too high; let's start with a straight
   line, tomorrow.

*** Footnotes
    1. In =[[file:v2/programs/drawing-modes.js][drawing-modes.js]]=, =update()= always creates an
       array of 3 vertices, but only =[[file:v2/programs/drawing-modes.js::window%5B'GL'%5D.drawArrays(mode,%20first,%20count);][count]]= is used.


** [2019-12-03 Tue]
   v3 begins. the modularized programs seem to have some
   parts in common. seems =update()= is the only difference,
   or really the =render()=; there is room for improvement.


** [2019-11-26 Tue]
   i remembered that i use =JSON.stringify= in the =load*=
   functions because some =window= objects are big and will
   be truncated, so to see the full logs.

   trying to modularize programs. right now stuck on loading
   from =drawing-modes=, =window[programs/drawing-modes]= is
   undefined because i need to pass the params on load.


** [2019-09-15 Sun]
   code has been revamped, here are my latest notes:

   - =Math.interpolate= works fine for now; i can move an
     object relatively smooth. Thinking about it, this seems
     to be more for program-animated objects, but i am
     missing the comprehension of animating with the context
     of how much time as passed. In this case, i'm just
     moving 2 POINTS and 2 TRIANGLES across the screen in 1
     second. I interpolated 1s in milliseconds, so 1000
     indices into an array of values ranging from -.5 to
     .5. I accumulate the passing of game time into the
     program's =_ms=, and use its floored value as the
     index. It works, but i wonder how else i could do it
     that would work for this example; or maybe i'm not
     understanding the way MDN does it.

   - code reformatting in an attempt to make it look
     cleaner, eg. i moved the =Canvas= methods definitions
     out and return just ={ load }=, then add a comment-line
     to give a visual separation of the function's metadata.

   - the animation looks fine, but i did have to slow it
     down from 1 to 10 seconds, and i think that's good
     enough for me to move on. Once =_ms= reaches that
     limit, it goes back to 0. The interpolation method
     could be improved by adding more levels, ie. =[0, 500,
     1000]= interpolates as =[-1, 1, -1]=, then i could make
     the drawings bounce. anyway, i just had a revelation on
     how to add multiple models: they are Programs! Create a
     new program for different manipulations, and pass
     similar models to each relevant one.


** [2019-04-26 Fri]
   geez... a year later. learning from [[file:/opt/jqtruong/programmingtil-webgl][ProgrammingTIL -
   WebGL]]. really great set of  tutorials, so far.

   in tutorial 26, color gets interpolated from one point to
   another; it's kinda cool.

   in tutorial 27, i'm drawing a circle with a variant
   number of sides, and it's interesting how an inner circle
   is drawn. it draws using =TRIANGLE_STRIP=, which acts
   like a =LINE_STRIP=, ie. the last node connects to the
   the previous node, but the previous two nodes for a
   triangle. (see tutorial 25 to play with the different
   draw styles.) #27 loops through 360° and draws super thin
   triangles.


** [2018-04-13 Fri]
   wow, i have been working little by little but i really
   suck at updating this log.

   anyway, now i understand orthographic projection a bit
   more; i need to rotate it around the x-axis a bit to make
   everything look 3d. so now i can start adding those
   windows!


** [2018-02-09 Fri]
   based on this [[https://computergraphics.stackexchange.com/questions/1608/how-to-combine-rotation-in-2-axis-into-one-matrix][answer]], i can rotate on multiple axis by
   multiplying the transformed matrices together:
   : RotXMat * RotYMat * RotZMat


** [2018-02-04 Sun]
   trying to get ortho to show. i think that's what i need:
   3d on a 2d plane and space.

   finally got it to work!
   1. doesn't seem to matter what z-scale is as long as it's
      between -1 and 1, but maybe it's needed for objects in
      front and behind other objects.
   2. vertices aren't normalized, since they are done in the
      projection.


** [2018-01-25 Thu]
   .o0(i really need to remember to write my journey through
   this project down each day...)

   i got to a point where i can draw a rectangle but not
   without problems. i'm only sending 2 components, x and y,
   in the buffer, just like in the demo but somehow the
   latter works with a =vec4= position attribute but not
   mine; i have to make it a =vec2= and fill it up to a
   =vec4=. So far, this is a mystery but i need to move on,
   and history tells me that i will figure it out someday.

   i need to move =gl= functions into its own
   library. keeping the context in =Canvas= is more
   typing...

   then add a rotation to the rectangle.


** [2017-12-27 Wed]
   i got the canvas almost set up. programs go in there
   rather fitly, but wondering about buffers and/or
   variables. in nullprogram's sample code, the variables
   are attached at render, and, in learningwebgl, they are
   attached during program inititialization and in render.


** [2017-12-25 Mon]
   looks like there will be many programs for each thing i
   want to draw.

   WebGL pipeline (high-level):
   1. Runs the vertex shader on all of the vertices to work
      out where everything is.
   2. Linearly interpolates between the vertices, which
      tells it which fragments (which for the moment you can
      treat as being the same as pixels) need to be painted.
   3. For each fragment, run the fragment shader on it to
      work out its colour.
   4. Write it to the frame buffer.


*** Variable types
    - [[https://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html#attributes][attributes]] :: data pulled from buffers
    - [[https://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html#uniforms][uniforms]] :: values that stay the same for all vertices
         of a single draw call; most likely to act on an
         attribute.


** Topics

*** [[https://webglfundamentals.org/webgl/lessons/webgl-drawing-multiple-things.html][Drawing multiple things]]
    For each thing you want to draw, you use a program and
    follow these steps:
    - create a buffer with the vertices data
    - setup attributes for the thing you want to draw
    - for each attribute call (see [[file:v2/gl.js::sendVertices:%20function%20(opts,%20buffer,%20attr)%20{][=sendVertices=]]):
      - =gl.enableVertexAttribArray= :: the attribute name
           that will receive the data in the shader
      - =gl.bindBuffer= :: sets =buffer= as the web GL
           context's =ARRAY_BUFFER= to pass the data to the
           attribute
      - =gl.vertexAttribPointer= :: sets the attribute's
           parameters, eg. number of components, type, etc.
    - call =gl.useProgram= for the program needed to draw
    - setup uniforms for the thing you want to draw (to test)
    - call =gl.uniformXXX= for each uniform (to test)
    - call =gl.activeTexture= and =gl.bindTexture= to assign
      textures to texture units. (to test)
    - call =gl.drawArrays= or =gl.drawElements= (to test the
      latter)

    =drawArrays= needs to run last because it is the
    bridging function that to connect the two sides, the
    data and the buffer to the shader program, after
    they're set.


*** Orthographic projection matrix


*** Perspective projection matrix
    - fov :: 45° field of view
    - f :: inverse tangent of 22.5°


* Matrix

** Multiply
   | 0 | 1 | 2 |   | a |   | (0*a) + (1*b) + (2*c) |
   | 3 | 4 | 5 | x | b | = | (3*a) + (4*b) + (5*c) |
   | 6 | 7 | 8 |   | c |   | (6*a) + (7*b) + (8*c) |

*** Dimension rule
    3x3 ⋅ 3x1 = 3x1
    AxB ⋅ CxD = AxD as long as B == C


* Refs
  - http://nullprogram.com/sphere-js/
  - [[http://learningwebgl.com/blog/?p=859][learningwebgl: blending]]
  - [[https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/orthographic-projection-matrix][ortho projection explaination]]
  - [[file:/opt/jqtruong/programmingtil-webgl][ProgrammingTIL - WebGL]]

** Webserver
   Start a webserver to serve the shader files, just for
   better legibility.

*** Lisp way
    #+BEGIN_SRC lisp
      (ql:quickload :hunchentoot)
      (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 4242))
      (push (hunchentoot:create-folder-dispatcher-and-handler
             "/nvm/" "~/work/gamedev/passed-in-future/nvm/")
            hunchentoot:*dispatch-table*)
    #+END_SRC

    then visit http://localhost:4242/nvm/index.html.


*** Node way
    =http-server= boom!


* Tasks

** IN_PROGRESS learn some WebGL

*** DONE Start with rotating colorful rectangles.


*** TODO animate a sine wave

**** [2019-12-15 Sun]
     i think i need to draw points first, then lines
     connecting them, then animate the points. Horizontal
     from -1 to 1, and:
     - amplitude (A): .25 (y)
     - frequency (w): 1 (one cycle to start with)
     - period (t?): 2 seconds (so it goes up from -1 to -.5
       and .5 to 1, and down from -.5 to .5)

     formula is: A × sin(wt)


** DONE draw multiple things


** TODO rotate multiple windows
   need to get a nice effect while spinning the
   windows... like some overlay maybe... idk, just make it
   shiny.
